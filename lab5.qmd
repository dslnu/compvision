---
title: "Lab 5: Image derivatives"
---

# Guide

## Blur

Smoothing (blur) is a low-pass filter:

 - it filters out the "high frequency" part of the image
 - helps in removing noise

### Normalized box filter

```{python}
import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt
 
img = cv.imread('img/cybertruck.png')
assert img is not None, "file could not be read, check with os.path.exists()"
 
blur = cv.blur(img,(15,15))
 
plt.subplot(121),plt.imshow(img),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(blur),plt.title('Blurred')
plt.xticks([]), plt.yticks([])
plt.show()
```

### Gaussian filter
:::{.callout-important}
Both width and height of the kernel should be odd
:::

```{python}
gblur = cv.GaussianBlur(img,(15,15),0)
plt.subplot(121),plt.imshow(img),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(gblur),plt.title('Gaussian-blurred')
plt.xticks([]), plt.yticks([])
plt.show()

```

### Median blur
Used for noise reduction.


```{python}
noisy_img = cv.imread('img/noisy_image.png')
median = cv.medianBlur(noisy_img,15)

plt.subplot(121),plt.imshow(noisy_img),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(median),plt.title('Median-blurred')
plt.xticks([]), plt.yticks([])
plt.show()

```


### Bilateral blur
Where d is Diameter of each pixel neighborhood that is used during filtering. If it is non-positive, it is computed from sigmaSpace.
- used for noise removal
- keeps edges sharp

Parameters:

  - `d`: diameter of each pixel neighborhood 
  - `sigmaColor` is used to filter sigma in the color space.
  - `sigmaSpace` is used to Filter sigma in the coordinate space

More info [here](https://homepages.inf.ed.ac.uk/rbf/CVonline/LOCAL_COPIES/MANDUCHI1/Bilateral_Filtering.html) and [here](https://people.csail.mit.edu/sparis/bf_course/).

```{python}
bilateral_blur = cv.bilateralFilter(img,90,75,75)

plt.subplot(121),plt.imshow(img),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(bilateral_blur),plt.title('Bilateral-blurred')
plt.xticks([]), plt.yticks([])
plt.show()

```
## Sharpening

Image gradient is "high-pass filter":

  - it filters out the low frequency part of the image in order to highlight the abrupt parts of the image
  - used for edge detection

### Procedure

- the image should be first converted to a single channel (grayscale)
- as Sobel kernels are susceptible to noise, we should blur the image
- then apply a sharpening kernel

:::{.callout-tip icon=false}
### Kernel for Sobel
Sobel uses one-dimensional derivatives. It combines Gaussian smoothing and differentiation.

$$
G_x =  \begin{bmatrix}
  1 & 0 & -1 \\
\end{bmatrix} \circ \begin{bmatrix}
  1 \\
  2 \\
  1
\end{bmatrix} =
\begin{bmatrix}
  1 & 0 & -1 \\
  2 & 0 & -2 \\
  1 & 0 & -1
\end{bmatrix}
$$

$$
G_y =  \begin{bmatrix}
  -1 & -2 & -1 \\
  0 & 0 & 0 \\
  1 & 2 & 1
\end{bmatrix}
$$ {#eq-sobel_kernels}

And the overall gradient is:
$$
G = \sqrt{G_x^2 + G_y^2}
$$
:::

Laplacian uses two-dimensional derivatives. It calls internally the Sobel operator to perform its computation

:::{.callout-note icon=false}
### Kernel for Laplacian (2D-approximation)
$$
\nabla_5^2 = \begin{bmatrix}
  0 & 1 & 0 \\
  1 & -4 & 1\\
  0 & 1 & 0
\end{bmatrix}
$$
:::

### Example code
```{python}
import cv2
import numpy as np
from matplotlib import pyplot as plt

# loading image
img0 = cv2.imread('img/cybertruck.png',)

# converting to gray scale
gray = cv2.cvtColor(img0, cv2.COLOR_BGR2GRAY)

# remove noise
img = cv2.GaussianBlur(gray,(3,3),0)

# convolute with proper kernels
laplacian = cv2.Laplacian(img,cv2.CV_64F)
sobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)  # x
sobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=5)  # y

plt.subplot(2,2,1),plt.imshow(img,cmap = 'gray')
plt.title('Original'), plt.xticks([]), plt.yticks([])
plt.subplot(2,2,2),plt.imshow(laplacian,cmap = 'gray')
plt.title('Laplacian'), plt.xticks([]), plt.yticks([])
plt.subplot(2,2,3),plt.imshow(sobelx,cmap = 'gray')
plt.title('Sobel X'), plt.xticks([]), plt.yticks([])
plt.subplot(2,2,4),plt.imshow(sobely,cmap = 'gray')
plt.title('Sobel Y'), plt.xticks([]), plt.yticks([])

plt.show()
```

# Exercises


# Recommended reading
